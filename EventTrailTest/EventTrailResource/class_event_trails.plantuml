@startuml


class EventTrailSDK {

    eventPersister: TrailEventPersister;
    trailPersister: TrailPersister;
    integrations: List<EventTrailIntegration>


    + trackEvent(event_name, event_params)
    + openTrail(TrailOpenMeta): Trail;
    + closeTrail(TrailFinishMeta): Trail;
    - startIntegrations();
    - stopIntegrations();

    + applicationDidEnterBackground()
    + applicationWillEnterForeground()
}

EventTrailSDK o-- TrailEventCreator
EventTrailSDK o-- TrailsManager
EventTrailSDK o-- EventTrailIntegration
EventTrailSDK o-- TrailEventPersister
EventTrailSDK o-- TrailPersister

' interface Persister<Item> {
'     + persist(Item)
' }
' Persister <-- TrailPersister
' Persister <-- TrailEventPersister

class TrailPersister<TrailOpenData> {
    store: EventTrailStore;
    eventCreator: TrailEventCreator;
    eventPersister: TrailEventPersister;

    + persist(TrailOpenData)
}
TrailPersister o-- EventTrailStore
TrailPersister o-- TrailEventPersister
TrailPersister o-- TrailEventCreator


class TrailEventPersister {
    store: EventTrailStore;

    + persist(TrailEvent)
}
TrailEventPersister o-- EventTrailStore

' class StartTrailPersister { 
'     + persist(TrailOpenData)
' }

' class EndTrailPersister { 
'     + persist(TrailOpenData)
' }


' TrailEventPersister o-- UpcomingTrailEventsSubject

' class UpcomingTrailEventsSubject {
'     + emit()
'     + onUpComingEvent(callback)
' }

interface EventTrailIntegration {
    + start();
    + stop();
}
EventTrailIntegration <-- MMEventPushingScheduler
EventTrailIntegration <--  MMFireAndForgetOldEventPusher
' EventTrailIntegration <-- ThresholdPusherIntegration


class MMEventPushingScheduler {
    store: EventTrailStore;
    + start();
    + stop();
}
MMEventPushingScheduler o-- EventTrailStore

' class ThresholdPusherIntegration {
'     subject: UpcomingTrailEventsSubject;
'     store: EventTrailStore;
'     thresholdNumberOfEvents: Int;
'     - checkIfReachingThreshold();
'     + start();
'     + stop();
' }
' ThresholdPusherIntegration o-- UpcomingTrailEventsSubject
' ThresholdPusherIntegration o-- EventTrailStore

class  MMFireAndForgetOldEventPusher {
    store: EventTrailStore;
    TrailEventCreator: TrailEventCreator;

    + start();
    + stop();
}
 MMFireAndForgetOldEventPusher o-- EventTrailStore

interface EventTrailStore {
    + saveEvent(MMTrailEvent);
    + saveTrail(MMTrail);

    + queryEventsBySessionIds(Array<String>);
    + queryEventsNotInSessionIds(Array<String>);
    + queryTrailsNotInSessionIds(Array<String>);
    ' + queryAllEvents();
    ' + queryAllTrails();
 
    + deleteEventsByEventIds(Array<String>);
    ' + deleteEventsByTrailIds(Array<String>);
    + deleteTrailsByTrailIds(Array<String>);
    ' + deleteAllEvents()
    ' + deleteAllTrails()
}

EventTrailStore <-- SqliteEventTrailStore

class SqliteEventTrailStore {
    database: Sqlite;
}

class Trail {
	trail_id: string,
    trail_session: string,
	tracking_session_id: string,
	level: int,
    parent_trail_id: string,
}

class TrailOpenMeta {
    app_id: string,
    entry_point.scope: string,
    entry_point.type: string,
    entry_point.app_id_trigger: string,
    entry_point.screen_name: string
}

class TrailFinishMeta {
    app_id: string,
    exit_point.end_by: string,
    exit_point.screen_name: string,
    exit_point.app_id: string,
}

class TrailOpenData {
    info: Trail
    app_id: string,
    entry_point.scope: string,
    entry_point.type: string,
    entry_point.app_id_trigger: string,
    entry_point.screen_name: string
}
TrailOpenData o-- Trail

class TrailEvent {
  event_name: string,
  event_params: Dictionary,

  trail_id: string, // in event_params also
  event_id: string, // in event_params also

  + toPersistModel(): StorePersistedTrailEvent
}

TrailEvent -- StorePersistedTrailEvent

class StorePersistedTrailEvent {
  event_name: string,
  event_bundle: string, // json string { event_name, event_param: { trail_id, event_id, ...event_params } }

  trail_id: string, 
  event_id: string,
}

class TrailEventCreator {
    - trailsManager: TrailsManager;
    - latestEventId: TrailEvent;

    + create(event_name, event_params): TrailEvent;
}
TrailEventCreator o-- TrailsManager

class TrailsManager {
      trailSession: TrailSession;
    - latestTrail: Trail;

    + removeTrail(): Trail;
    + getLatestTrail(): Trail;
    + create(TrailOpenMeta): TrailOpenData;
}
TrailsManager o-- TrailSession
TrailsManager *-- TrailItem

class TrailItem {
    parent: TrialItem,
    value: Trail,
}
TrailItem o-- TrailItem

class TrailSession {
    - currentAppSession: string;
    + getCurrentSession(): string;
}

@enduml

